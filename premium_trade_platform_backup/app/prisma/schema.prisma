generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/premium_trade_platform/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main user model
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  company       Company?
  ads           Ad[]
  subscription  Subscription?
}

model Company {
  id              String                @id @default(cuid())
  name            String
  country         String
  registryNumber  String?
  licenseNumber   String?
  linkedinUrl     String?
  status          CompanyStatus         @default(PENDING)
  userId          String                @unique
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifications   CompanyVerification[]
}

model CompanyVerification {
  id          String                    @id @default(cuid())
  companyId   String
  status      VerificationStatus        @default(PENDING)
  reviewedBy  String?
  reviewDate  DateTime?
  notes       String?
  createdAt   DateTime                  @default(now())
  company     Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  ads         Ad[]
}

model Ad {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        AdType
  categoryId  String
  country     String
  contactInfo String
  price       Float?
  currency    String    @default("EUR")
  status      AdStatus  @default(ACTIVE)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime
  category    Category  @relation(fields: [categoryId], references: [id])
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String              @id @default(cuid())
  userId            String              @unique
  stripeCustomerId  String              @unique
  stripeSubscriptionId String?          @unique
  status            SubscriptionStatus  @default(INACTIVE)
  priceId           String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  ADMIN
  VERIFIED_COMPANY
  PENDING
  REJECTED
}

enum CompanyStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AdType {
  BUY
  SELL
}

enum AdStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  DELETED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}
